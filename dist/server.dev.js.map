{"version":3,"sources":["server.js"],"names":["express","require","mongoose","bodyParser","cors","dotenv","path","config","app","port","process","env","PORT","use","json","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","Message","model","Schema","username","type","String","required","text","time","Date","now","post","req","res","body","newMessage","save","status","send","message","error","get","find","sort","messages","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// MongoDB Atlas Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB Atlas connected'))\r\n  .catch((err) => console.log('Error connecting to MongoDB Atlas:', err));\r\n\r\n// Define Mongoose Model for Message\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  username: { type: String, required: true },\r\n  text: { type: String, required: true },\r\n  time: { type: Date, default: Date.now },\r\n}));\r\n\r\n// Route to save a message to the database\r\napp.post('/save-message', async (req, res) => {\r\n  const { username, text } = req.body;\r\n\r\n  try {\r\n    const newMessage = new Message({ username, text });\r\n    await newMessage.save();\r\n    res.status(200).send({ message: 'Message saved successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error saving message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages from the database\r\napp.get('/get-messages', async (req, res) => {\r\n  try {\r\n    const messages = await Message.find().sort({ time: 1 });\r\n    res.json(messages);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"file":"server.dev.js"}