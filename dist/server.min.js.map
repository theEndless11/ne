{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","path","dotenv","port","process","env","PORT","app","use","config","json","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","bodyParser","err","model","Schema","String","required","text","type","time","Date","default","now","post","req","res","_req$body","username","newMessage","regeneratorRuntime","async","_context","prev","next","body","Message","awrap","save","status","send","message","t0","error","stop","get","messages","_context2","find","sort","sent","listen","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,WAAUC,QAAQ,eAGlBE,KAAOF,QAAQ,QAFfC,OAAWD,QAAQ,UAInBG,KAAOH,QAAQ,QAFrBI,OAAMF,SACN,IAAME,IAAML,UAONM,KAAOC,QAAQC,IAAIC,MAAQ,IAGjCC,IAAIC,IAAIR,QANRE,IAAAA,IAAOO,WAAPC,QAUAX,SAASY,QAAQP,QAAQC,IAAIO,YAAa,CAAEC,iBAAiB,EAAMC,oBAAoB,IAJpFC,KAAKf,WAAAA,OAARgB,QAAAC,IAAA,6BAIA,MAHQC,SAAAA,GAAAA,OAAUF,QAAlBC,IAEA,qCAAAE,KAC4CN,IAAAA,QAAAA,SAAFO,MAAA,UAAA,IAAArB,SAAAsB,OAAA,CAAyBP,SAAAA,CAAAA,KAAkBQ,OAAEC,UAAA,GAAvFC,KACQ,CAAAC,KAAAH,OAAAC,UAAA,GAAAG,KAAA,CAAMV,KAAOW,KAAKC,QAAAD,KAAAE,QAW1BtB,IAAIuB,KAAK,gBAAiB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAV,EAAAW,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAP,EAPKF,EAAAU,KAAzBC,EAOoBT,EAPpBS,SAAU3C,EAOUkC,EAPVlC,KAOUuC,EAAAC,KAAA,EANEhB,EAAU,IAAAmB,QAAA,CAAAR,SAAAA,EAAAV,KAAAA,IAMZc,EAAAE,KAAA,EAAAJ,mBAAAO,MAPoCR,EAAAS,QAOpC,KAAA,EALxBpB,EAAMqB,OAAA,KAAAC,KAAA,CAAAC,QAAA,gCAKkBT,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,MAAA,GALFf,EAAAA,OAAU,KAAAuB,KAAA,CAAAC,QAAA,uBAAAE,MAAAX,EAAAU,KAKR,KAAA,GAAA,IAAA,MAAA,OAAAV,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAJlB3C,IAAA4C,IAAA,gBAAA,SAAApB,EAAAC,GAAA,IAAAoB,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAAAJ,mBAAAO,MAmBmBD,QAAQY,OAAOC,KAAK,CAAE7B,KAAM,KAnB/C,KAAA,EAmBE0B,EAnBFC,EAAAG,KAIJ1B,EAAJpB,KAAS0C,GAJDC,EAAAb,KAAA,GAAA,MAAA,KAAA,EAAAa,EAAAd,KAAA,EAAAc,EAAAL,GAAAK,EAAA,MAAA,GAsBJrB,EAAIa,OAAO,KAAKC,KAAK,CAAEC,QAAS,0BAA2BE,MAAKI,EAAAL,KAtB5D,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIkB3C,IAAAkD,OAAAtD,KAAA,WAAAa,QAAAC,IAAA,0BAAAyC,OAAAvD","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// MongoDB Atlas Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB Atlas connected'))\r\n  .catch((err) => console.log('Error connecting to MongoDB Atlas:', err));\r\n\r\n// Define Mongoose Model for Message\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  username: { type: String, required: true },\r\n  text: { type: String, required: true },\r\n  time: { type: Date, default: Date.now },\r\n}));\r\n\r\n// Route to save a message to the database\r\napp.post('/save-message', async (req, res) => {\r\n  const { username, text } = req.body;\r\n\r\n  try {\r\n    const newMessage = new Message({ username, text });\r\n    await newMessage.save();\r\n    res.status(200).send({ message: 'Message saved successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error saving message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages from the database\r\napp.get('/get-messages', async (req, res) => {\r\n  try {\r\n    const messages = await Message.find().sort({ time: 1 });\r\n    res.json(messages);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"]}